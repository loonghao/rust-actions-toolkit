name: Zero-Config Release

# This is the simplest possible release workflow
# Works for any Rust project with automatic detection

on:
  push:
    tags: ['v*']
  workflow_dispatch:

jobs:
  # Single-platform release (simplest)
  release-simple:
    name: Simple Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
      
      # That's it! Everything else is automatic
      - name: Release
        uses: loonghao/rust-actions-toolkit/actions/smart-release@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # Multi-platform release (recommended)
  release-multi:
    name: Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Zero-dependency Windows builds
          - { os: ubuntu-latest, target: x86_64-pc-windows-gnu }
          - { os: ubuntu-latest, target: i686-pc-windows-gnu }
          # Static Linux builds  
          - { os: ubuntu-latest, target: x86_64-unknown-linux-musl }
          - { os: ubuntu-latest, target: aarch64-unknown-linux-musl }
          # Standard builds
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu }
          - { os: ubuntu-latest, target: aarch64-unknown-linux-gnu }
          - { os: macos-13, target: x86_64-apple-darwin }
          - { os: macos-13, target: aarch64-apple-darwin }

    steps:
      - uses: actions/checkout@v4
      
      # Just specify the target, everything else is automatic
      - name: Release
        uses: loonghao/rust-actions-toolkit/actions/smart-release@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          target: ${{ matrix.target }}

# That's the entire workflow!
# 
# What happens automatically:
# 1. Detects project name from Cargo.toml
# 2. Detects if it's a binary, Python extension, or hybrid project
# 3. Builds appropriate artifacts for the target platform
# 4. Creates optimized archives (tar.gz for Unix, zip for Windows)
# 5. Uploads everything to GitHub releases
# 6. Generates release notes
# 7. Handles prerelease detection from tag names
#
# Supported project types:
# - Binary projects (src/main.rs or [[bin]] in Cargo.toml)
# - Python extensions (pyproject.toml)
# - Hybrid projects (both binary and Python)
# - Library projects (no binary artifacts)
#
# Examples of what gets built:
# 
# Binary project (e.g., py2pyd):
# - py2pyd-x86_64-unknown-linux-gnu.tar.gz
# - py2pyd-x86_64-pc-windows-gnu.zip
# - py2pyd-x86_64-apple-darwin.tar.gz
#
# Python extension project:
# - my_extension-1.0.0-cp311-cp311-linux_x86_64.whl
# - my_extension-1.0.0-cp311-cp311-win_amd64.whl
# - my_extension-1.0.0-cp311-cp311-macosx_10_9_x86_64.whl
#
# Hybrid project (e.g., py2pyd with Python bindings):
# - Both binary archives AND Python wheels
#
# To use in your project:
# 1. Copy this file to .github/workflows/release.yml
# 2. Commit and push
# 3. Create a tag: git tag v1.0.0 && git push origin v1.0.0
# 4. Watch the magic happen! âœ¨
