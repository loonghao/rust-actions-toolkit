# Example configuration for a Rust project with Python wheels
# This is suitable for projects that provide both Rust crates and Python packages
# Place this file at the root of your project as "release-plz.toml"

[workspace]
# Enable automatic changelog generation
changelog_update = true
# Disable GitHub releases at workspace level (handled by package level)
git_release_enable = false
# Enable automatic tag creation (triggers release workflows for Python wheels)
git_tag_enable = true
# Enable processing for releases
release = true

[changelog]
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""

[[package]]
name = "my-python-rust-lib"  # CHANGE THIS: Replace with your actual package name
changelog_update = true
git_release_enable = true
release = true  # Enable crates.io publishing
git_tag_name = "v{{version}}"
allow_dirty = false
semver_check = true
git_release_draft = false
git_release_body = """
## ðŸš€ What's Changed

{{changelog}}

## ðŸ“¦ Installation

### Python Package
```bash
pip install {{package}}
```

### Download Binary (if available)
Download the appropriate binary for your platform from the assets below.

### Using Cargo
```bash
cargo install {{package}}
```

## ðŸ”— Links
- [PyPI Package](https://pypi.org/project/{{package}}/)
- [Documentation](https://docs.rs/{{package}})
- [Crates.io](https://crates.io/crates/{{package}})
- [Examples](https://github.com/{{owner}}/{{package}}/tree/main/examples)
- [Changelog](https://github.com/{{owner}}/{{package}}/blob/main/CHANGELOG.md)

**Full Changelog**: https://github.com/{{owner}}/{{package}}/compare/{{previous_tag}}...{{version}}
"""

# Required secrets for this configuration:
# - CARGO_REGISTRY_TOKEN: Your crates.io API token
# - GITHUB_TOKEN: Automatically provided by GitHub
# - RELEASE_PLZ_TOKEN: Optional GitHub PAT for enhanced features

# Required files for Python wheel projects:
# - pyproject.toml: Maturin configuration (see examples/python-wheel/pyproject.toml)
# - Cargo.toml: Standard Rust project configuration
# - src/lib.rs: Rust library with PyO3 bindings

# Required workflows for Python wheel releases:
# - .github/workflows/release-plz.yml: Handles version management and GitHub releases
# - .github/workflows/release.yml: Builds Python wheels when tags are created

# The release workflow will automatically detect pyproject.toml and build wheels
# for multiple platforms (Linux, macOS, Windows) and architectures (x86_64, ARM64)
