name: Release py2pyd

# Example workflow for py2pyd project using smart-release for ultimate simplicity
# This demonstrates zero-config release with automatic detection

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # Zero-config release with smart-release action
  release:
    name: Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Zero-dependency Windows builds (aligned with Docker base image)
          - { target: x86_64-pc-windows-gnu, os: ubuntu-latest }
          - { target: i686-pc-windows-gnu, os: ubuntu-latest }
          # Static Linux builds (no dependencies)
          - { target: x86_64-unknown-linux-musl, os: ubuntu-latest }
          - { target: aarch64-unknown-linux-musl, os: ubuntu-latest }
          # Standard builds (dynamic linking)
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest }
          - { target: aarch64-unknown-linux-gnu, os: ubuntu-latest }
          # macOS builds
          - { target: x86_64-apple-darwin, os: macos-13 }
          - { target: aarch64-apple-darwin, os: macos-13 }

    steps:
      - uses: actions/checkout@v4

      # That's it! Everything else is automatic âœ¨
      # - Auto-detects project name from Cargo.toml
      # - Auto-detects project type (binary + Python extension)
      # - Builds appropriate artifacts
      # - Creates optimized archives
      # - Uploads to GitHub releases
      # - Uses custom release notes template if available
      - name: Smart Release
        uses: loonghao/rust-actions-toolkit/actions/smart-release@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          target: ${{ matrix.target }}

# What smart-release automatically does:
# 1. Detects py2pyd as a hybrid project (binary + Python extension)
# 2. Builds both binary executables and Python wheels
# 3. Creates optimized archives:
#    - py2pyd-x86_64-pc-windows-gnu.zip
#    - py2pyd-x86_64-unknown-linux-gnu.tar.gz
#    - py2pyd-x86_64-apple-darwin.tar.gz
#    - etc.
# 4. Uploads Python wheels:
#    - py2pyd-1.0.0-cp311-cp311-linux_x86_64.whl
#    - py2pyd-1.0.0-cp311-cp311-win_amd64.whl
#    - py2pyd-1.0.0-cp311-cp311-macosx_10_9_x86_64.whl
#    - etc.
# 5. Uses custom release notes template if .github/release-template.md exists
# 6. Auto-detects prerelease from tag names (alpha, beta, rc)
# 7. Generates comprehensive release with installation instructions

# Optional: Create a custom release notes template
# Create .github/release-template.md in your py2pyd project:
#
# # py2pyd {{VERSION}}
#
# ðŸ”„ Convert Python files to .pyd extension!
#
# ## Downloads
# - Windows: `py2pyd-x86_64-pc-windows-gnu.zip`
# - Linux: `py2pyd-x86_64-unknown-linux-gnu.tar.gz`
# - macOS: `py2pyd-x86_64-apple-darwin.tar.gz`
#
# ## Install
# ```bash
# pip install py2pyd=={{VERSION}}
# ```
#
# ## Usage
# ```bash
# py2pyd input.py output.pyd
# ```

# Legacy complex approach (now unnecessary):
# The following jobs are no longer needed with smart-release
# but kept as comments for reference

  # Legacy approach - all this complexity is now handled by smart-release!
  #
  # The smart-release action above automatically:
  # - Builds binaries for all platforms
  # - Builds Python wheels for all platforms
  # - Creates optimized archives
  # - Uploads everything to GitHub releases
  # - Uses custom release notes template if available
  # - Handles prerelease detection
  # - Provides comprehensive installation instructions
  #
  # No additional jobs needed! ðŸŽ‰
