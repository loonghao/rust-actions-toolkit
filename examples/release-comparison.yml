# Comparison of different release approaches
# This file shows three different ways to set up releases with rust-actions-toolkit

name: Release Comparison

on:
  push:
    tags: ['v*']

jobs:
  # Method 1: Smart Release (Recommended - Zero Config)
  # ‚úÖ Minimal configuration (3 lines)
  # ‚úÖ Automatic project detection
  # ‚úÖ Optimal defaults
  # ‚úÖ Custom release notes template support
  smart-release:
    name: Smart Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Aligned with Docker base image targets
          - { target: x86_64-pc-windows-gnu, os: ubuntu-latest }
          - { target: x86_64-unknown-linux-musl, os: ubuntu-latest }
          - { target: x86_64-apple-darwin, os: macos-13 }
    steps:
      - uses: actions/checkout@v4
      
      # That's it! Everything else is automatic ‚ú®
      - uses: loonghao/rust-actions-toolkit/actions/smart-release@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          target: ${{ matrix.target }}

  # Method 2: Upload Release Artifacts (Medium Control)
  # üîß More control over build and upload process
  # üîß Separate build and upload steps
  # üîß Custom artifact handling
  upload-artifacts:
    name: Upload Artifacts (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { target: x86_64-pc-windows-gnu, os: ubuntu-latest }
          - { target: x86_64-unknown-linux-musl, os: ubuntu-latest }
    steps:
      - uses: actions/checkout@v4
      
      # Step 1: Build with main action
      - uses: loonghao/rust-actions-toolkit@v2
        with:
          command: release
          target: ${{ matrix.target }}
          enable-python-wheels: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 2: Upload with specialized action
      - uses: loonghao/rust-actions-toolkit/actions/upload-release-artifacts@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          binary-path: target/${{ matrix.target }}/release/
          wheel-path: target/wheels/
          create-archives: true

  # Method 3: Main Action (Full Control)
  # ‚öôÔ∏è Maximum flexibility
  # ‚öôÔ∏è Custom configuration for each step
  # ‚öôÔ∏è Manual artifact handling
  main-action:
    name: Main Action (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { target: x86_64-pc-windows-gnu, os: ubuntu-latest }
    steps:
      - uses: actions/checkout@v4
      
      # Full control over every aspect
      - uses: loonghao/rust-actions-toolkit@v2
        with:
          command: release
          target: ${{ matrix.target }}
          binary-name: my-app
          rust-toolchain: stable
          enable-python-wheels: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      # Manual upload using external action
      - uses: softprops/action-gh-release@v2
        with:
          files: |
            target/${{ matrix.target }}/release/my-app*
            target/wheels/*.whl
          token: ${{ secrets.GITHUB_TOKEN }}

# Comparison Summary:
#
# | Method | Config Lines | Maintenance | Flexibility | Use Case |
# |--------|-------------|-------------|-------------|----------|
# | Smart Release | 3-5 | Low | Medium | Most projects |
# | Upload Artifacts | 10-15 | Medium | High | Custom needs |
# | Main Action | 20+ | High | Maximum | Complex setups |
#
# Recommendations:
# - Use Smart Release for 90% of projects
# - Use Upload Artifacts when you need custom build logic
# - Use Main Action when you need maximum control
#
# Platform Support (all methods):
# - Windows: x86_64-pc-windows-gnu, i686-pc-windows-gnu
# - Linux: x86_64-unknown-linux-musl, aarch64-unknown-linux-musl
# - Linux: x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu  
# - macOS: x86_64-apple-darwin, aarch64-apple-darwin
