# Cross.toml - Configuration for cross-compilation with proper proc-macro handling
# This configuration ensures proc-macros are built for the host platform, not target platform

[build]
# Ensure proc-macros are built for the host platform
default-target = "x86_64-unknown-linux-gnu"

[build.env]
passthrough = [
    # OpenSSL configuration
    "OPENSSL_STATIC",
    "OPENSSL_LIB_DIR", 
    "OPENSSL_INCLUDE_DIR",
    "PKG_CONFIG_ALLOW_CROSS",
    "PKG_CONFIG_PATH",
    
    # Memory allocator configuration
    "CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG",
    
    # Proc-macro host configuration
    "CARGO_TARGET_DIR",
    "CARGO_BUILD_TARGET",
    
    # Windows cross-compilation toolchain
    "CC_i686_pc_windows_gnu",
    "CXX_i686_pc_windows_gnu",
    "AR_i686_pc_windows_gnu",
    "CC_x86_64_pc_windows_gnu",
    "CXX_x86_64_pc_windows_gnu",
    "AR_x86_64_pc_windows_gnu",
    
    # Linux cross-compilation
    "CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER",
    "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER"
]

# Configuration for Windows targets (fixes mimalloc and proc-macro issues)
[target.i686-pc-windows-gnu]
image = "ghcr.io/cross-rs/i686-pc-windows-gnu:main"
pre-build = [
    "apt-get update && apt-get install -y --no-install-recommends gcc-mingw-w64-i686 g++-mingw-w64-i686",
    # Ensure host Rust toolchain is available for proc-macros
    "rustup target add x86_64-unknown-linux-gnu"
]

[target.i686-pc-windows-gnu.env]
CC_i686_pc_windows_gnu = "i686-w64-mingw32-gcc-posix"
CXX_i686_pc_windows_gnu = "i686-w64-mingw32-g++-posix"
AR_i686_pc_windows_gnu = "i686-w64-mingw32-ar"
CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG = "true"
# Ensure proc-macros use host target
CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER = ""

[target.x86_64-pc-windows-gnu]
image = "ghcr.io/cross-rs/x86_64-pc-windows-gnu:main"
pre-build = [
    "apt-get update && apt-get install -y --no-install-recommends gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64",
    # Ensure host Rust toolchain is available for proc-macros
    "rustup target add x86_64-unknown-linux-gnu"
]

[target.x86_64-pc-windows-gnu.env]
CC_x86_64_pc_windows_gnu = "x86_64-w64-mingw32-gcc-posix"
CXX_x86_64_pc_windows_gnu = "x86_64-w64-mingw32-g++-posix"
AR_x86_64_pc_windows_gnu = "x86_64-w64-mingw32-ar"
CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG = "true"
# Ensure proc-macros use host target
CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER = ""

# Configuration for musl targets (with proc-macro support)
[target.x86_64-unknown-linux-musl]
image = "ghcr.io/cross-rs/x86_64-unknown-linux-musl:main"
pre-build = [
    "dpkg --add-architecture amd64",
    "apt-get update && apt-get install -y libssl-dev:amd64 pkg-config",
    # Ensure host toolchain for proc-macros
    "rustup target add x86_64-unknown-linux-gnu"
]

[target.x86_64-unknown-linux-musl.env]
# Ensure proc-macros use host target
CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER = ""

[target.aarch64-unknown-linux-musl]
image = "ghcr.io/cross-rs/aarch64-unknown-linux-musl:main"
pre-build = [
    "dpkg --add-architecture arm64",
    "apt-get update && apt-get install -y libssl-dev:arm64 pkg-config",
    # Ensure host toolchain for proc-macros
    "rustup target add x86_64-unknown-linux-gnu"
]

[target.aarch64-unknown-linux-musl.env]
# Ensure proc-macros use host target
CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER = ""

# Configuration for GNU targets (with proc-macro support)
[target.aarch64-unknown-linux-gnu]
image = "ghcr.io/cross-rs/aarch64-unknown-linux-gnu:main"
pre-build = [
    "dpkg --add-architecture arm64",
    "apt-get update && apt-get install -y libssl-dev:arm64 pkg-config",
    # Ensure host toolchain for proc-macros
    "rustup target add x86_64-unknown-linux-gnu"
]

[target.aarch64-unknown-linux-gnu.env]
# Ensure proc-macros use host target
CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER = ""

# Configuration for ARM targets (with proc-macro support)
[target.armv7-unknown-linux-gnueabihf]
image = "ghcr.io/cross-rs/armv7-unknown-linux-gnueabihf:main"
pre-build = [
    "dpkg --add-architecture armhf",
    "apt-get update && apt-get install -y libssl-dev:armhf pkg-config",
    # Ensure host toolchain for proc-macros
    "rustup target add x86_64-unknown-linux-gnu"
]

[target.armv7-unknown-linux-gnueabihf.env]
# Ensure proc-macros use host target
CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER = ""

# macOS targets (proc-macros should use host when cross-compiling from Linux)
[target.x86_64-apple-darwin]
image = "ghcr.io/cross-rs/x86_64-apple-darwin:main"
pre-build = [
    # Ensure host toolchain for proc-macros
    "rustup target add x86_64-unknown-linux-gnu"
]

[target.x86_64-apple-darwin.env]
# Ensure proc-macros use host target
CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER = ""

[target.aarch64-apple-darwin]
image = "ghcr.io/cross-rs/aarch64-apple-darwin:main"
pre-build = [
    # Ensure host toolchain for proc-macros
    "rustup target add x86_64-unknown-linux-gnu"
]

[target.aarch64-apple-darwin.env]
# Ensure proc-macros use host target
CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER = ""
