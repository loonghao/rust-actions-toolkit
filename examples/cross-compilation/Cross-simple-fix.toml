# Cross.toml - Simple Proc-Macro Cross-Compilation Fix
# This configuration uses standard cross images to avoid Docker permission issues
# Recommended for most projects including turbo-cdn

[build]
# Critical: Do NOT set default-target globally as it affects proc-macros

[build.env]
# Pass through essential environment variables
passthrough = [
    "CARGO_TARGET_DIR",
    "CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER",
    "RUSTFLAGS",
    "OPENSSL_STATIC",
    "OPENSSL_NO_VENDOR",
    "PKG_CONFIG_ALLOW_CROSS",
]

# Linux ARM64 targets - use standard cross images
[target.aarch64-unknown-linux-gnu]
# Use standard cross image to avoid permission issues
image = "ghcr.io/cross-rs/cross:aarch64-unknown-linux-gnu"

[target.aarch64-unknown-linux-gnu.env]
# Critical: Ensure proc-macros use host platform
CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER = ""
# ARM64-specific configuration
CC_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-gcc"
CXX_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-g++"
AR_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-ar"

# Linux musl targets (static builds) - use standard cross images
[target.x86_64-unknown-linux-musl]
# Use standard cross image to avoid permission issues
image = "ghcr.io/cross-rs/cross:x86_64-unknown-linux-musl"

[target.x86_64-unknown-linux-musl.env]
# Critical: Ensure proc-macros use host platform
CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER = ""
# Static linking configuration
RUSTFLAGS = "-C target-feature=+crt-static"

[target.aarch64-unknown-linux-musl]
# Use standard cross image to avoid permission issues
image = "ghcr.io/cross-rs/cross:aarch64-unknown-linux-musl"

[target.aarch64-unknown-linux-musl.env]
# Critical: Ensure proc-macros use host platform
CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER = ""
# ARM64 musl configuration
CC_aarch64_unknown_linux_musl = "aarch64-linux-gnu-gcc"
CXX_aarch64_unknown_linux_musl = "aarch64-linux-gnu-g++"
AR_aarch64_unknown_linux_musl = "aarch64-linux-gnu-ar"
RUSTFLAGS = "-C target-feature=+crt-static"

# Windows targets - use standard cross images
[target.x86_64-pc-windows-gnu]
# Use standard cross image to avoid permission issues
image = "ghcr.io/cross-rs/cross:x86_64-pc-windows-gnu"

[target.x86_64-pc-windows-gnu.env]
# Critical: Ensure proc-macros use host platform
CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER = ""
# Windows GNU configuration
CC_x86_64_pc_windows_gnu = "x86_64-w64-mingw32-gcc"
CXX_x86_64_pc_windows_gnu = "x86_64-w64-mingw32-g++"
AR_x86_64_pc_windows_gnu = "x86_64-w64-mingw32-ar"
# Static linking for zero dependencies
RUSTFLAGS = "-C target-feature=+crt-static -C link-args=-static"

# Key principles for proc-macro cross-compilation:
# 1. NEVER set global default-target in [build] section
# 2. ALWAYS set CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER=""
# 3. Use standard cross images to avoid Docker permission issues
# 4. Let Cargo automatically handle proc-macro vs binary target selection
# 5. Only specify target-specific configuration in [target.xxx] sections

# Usage instructions:
# 1. Copy this file to your project root as Cross.toml
# 2. Ensure you're using rust-actions-toolkit v3.0.3 or later
# 3. Run cross build --target <target> --release
# 4. All proc-macro crates (serde, async-trait, thiserror, clap) will work correctly
