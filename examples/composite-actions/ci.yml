# Example: Using composite actions for more control
# Place this file at .github/workflows/ci.yml in your project

name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main, develop]

jobs:
  # Basic CI checks using composite action
  basic-checks:
    name: Basic Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust CI
        uses: loonghao/rust-actions-toolkit/actions/setup-rust-ci@main
        with:
          toolchain: stable
          components: rustfmt,clippy
          check-format: true
          check-clippy: true
          check-docs: true
          clippy-args: '--all-targets --all-features -- -D warnings'

  # Cross-platform testing
  test:
    name: Test - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust CI
        uses: loonghao/rust-actions-toolkit/actions/setup-rust-ci@main
        with:
          toolchain: stable
          check-format: false
          check-clippy: false
          check-docs: false

      - name: Run tests
        run: cargo test --verbose --workspace

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security audit
        uses: rustsec/audit-check@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust CI
        uses: loonghao/rust-actions-toolkit/actions/setup-rust-ci@main
        with:
          toolchain: stable
          check-format: false
          check-clippy: false
          check-docs: false

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: false
