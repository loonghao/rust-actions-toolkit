# Universal release-plz configuration for Rust projects
#
# This configuration supports:
# - Pure Rust crates
# - Binary crates with cross-platform releases
# - Python wheel projects
#
# Strategy: release-plz handles crates.io publishing and creates GitHub releases,
# while .github/workflows/release.yml builds cross-platform binaries and Python wheels.
#
# Workflow:
# 1. release-plz creates tag (v1.0.0) and GitHub release with changelog
# 2. Tag triggers release.yml workflow for cross-platform builds
# 3. upload-rust-binary-action builds and uploads binaries to the existing release
# 4. For Python projects, maturin builds and uploads wheels
# 5. release-plz publishes to crates.io
#
# This approach leverages release-plz's strengths (version management, changelog, crates.io)
# while using specialized tools for cross-platform builds and Python wheels.

[workspace]
# Enable automatic changelog generation
changelog_update = true
# Disable GitHub releases at workspace level (handled by package level)
git_release_enable = false
# Enable automatic tag creation (triggers release.yml)
git_tag_enable = true
# Enable processing for releases
release = true

# Changelog configuration
[changelog]
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""

# Default package configuration
# Copy and customize this section for each package in your workspace
[[package]]
# CUSTOMIZE: Change this to your main package name
name = "your-package-name"
# Enable changelog updates
changelog_update = true
# Enable GitHub releases (release-plz creates draft, release.yml adds binaries and publishes)
git_release_enable = true
# Enable processing for releases
release = true
# Standard tag format (triggers release workflows) - with 'v' prefix to trigger release.yml
git_tag_name = "v{{version}}"
# Allow major version bumps for breaking changes
allow_dirty = false
# Ensure proper semantic versioning
semver_check = true
# Create published releases (upload-rust-binary-action will add binaries)
git_release_draft = false
# Custom release body template
git_release_body = """
## ðŸš€ What's Changed

{{changelog}}

## ðŸ“¦ Installation

### Download Binary
Download the appropriate binary for your platform from the assets below.

### Using Cargo
```bash
cargo install {{package}}
```

### Using Package Managers
```bash
# Homebrew (macOS/Linux)
brew install loonghao/tap/{{package}}

# Scoop (Windows)
scoop bucket add loonghao https://github.com/loonghao/scoop-bucket
scoop install {{package}}
```

## ðŸ”— Links
- [Documentation](https://docs.rs/{{package}})
- [Examples](https://github.com/{{owner}}/{{package}}/tree/main/examples)
- [Changelog](https://github.com/{{owner}}/{{package}}/blob/main/CHANGELOG.md)

**Full Changelog**: https://github.com/{{owner}}/{{package}}/compare/{{previous_tag}}...{{version}}
"""

# Example configuration for Python wheel projects
# Uncomment and customize if your project includes Python wheels
# [[package]]
# name = "your-python-package"
# changelog_update = true
# git_release_enable = true
# release = true
# git_tag_name = "v{{version}}"
# allow_dirty = false
# semver_check = true
# git_release_draft = false
# git_release_body = """
# ## ðŸš€ What's Changed
# 
# {{changelog}}
# 
# ## ðŸ“¦ Installation
# 
# ### Python Package
# ```bash
# pip install {{package}}
# ```
# 
# ### Download Binary
# Download the appropriate binary for your platform from the assets below.
# 
# ### Using Cargo
# ```bash
# cargo install {{package}}
# ```
# 
# ## ðŸ”— Links
# - [PyPI Package](https://pypi.org/project/{{package}}/)
# - [Documentation](https://docs.rs/{{package}})
# - [Examples](https://github.com/{{owner}}/{{package}}/tree/main/examples)
# - [Changelog](https://github.com/{{owner}}/{{package}}/blob/main/CHANGELOG.md)
# 
# **Full Changelog**: https://github.com/{{owner}}/{{package}}/compare/{{previous_tag}}...{{version}}
# """
