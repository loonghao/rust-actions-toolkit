name: 'Rust Actions Toolkit'
description: '🦀 Universal GitHub Actions toolkit for Rust projects - CI/CD, cross-platform builds, releases, and Python wheels'
author: 'loonghao'

inputs:
  command:
    description: 'Command to run: ci, release, release-plz, or setup'
    required: true
    default: 'ci'
  
  # Common inputs
  rust-toolchain:
    description: 'Rust toolchain version'
    required: false
    default: 'stable'
  
  # CI specific inputs
  check-format:
    description: 'Run cargo fmt --check (ci command)'
    required: false
    default: 'true'
  check-clippy:
    description: 'Run cargo clippy (ci command)'
    required: false
    default: 'true'
  check-docs:
    description: 'Run cargo doc (ci command)'
    required: false
    default: 'true'
  clippy-args:
    description: 'Additional arguments for clippy (ci command)'
    required: false
    default: '--all-targets --all-features -- -D warnings'
  
  # Release specific inputs
  target:
    description: 'Target platform for release (release command)'
    required: false
    default: ''
  binary-name:
    description: 'Binary name to release (release command)'
    required: false
    default: ''
  enable-python-wheels:
    description: 'Enable Python wheel building (release command)'
    required: false
    default: 'true'
  github-token:
    description: 'GitHub token for release uploads (release command)'
    required: false
    default: ''

  # Release-plz specific inputs
  cargo-registry-token:
    description: 'Cargo registry token for crates.io publishing (release-plz command)'
    required: false
    default: ''

  release-plz-token:
    description: 'Enhanced GitHub PAT for cross-workflow triggers (release-plz command)'
    required: false
    default: ''
  release-plz-command:
    description: 'Release-plz command: release, release-pr, or both (release-plz command)'
    required: false
    default: 'both'

  # Docker options (experimental)
  use-docker:
    description: 'Use Docker for builds (experimental)'
    required: false
    default: 'false'
  docker-image:
    description: 'Docker image to use (base, cross-compile, python-wheels, security-audit)'
    required: false
    default: 'base'

outputs:
  rust-version:
    description: 'Installed Rust version'
    value: ${{ steps.rust-version.outputs.version }}
  binary-path:
    description: 'Path to the built binary (release command)'
    value: ${{ steps.build-binary.outputs.binary-path }}
  wheel-path:
    description: 'Path to the built Python wheel (release command)'
    value: ${{ steps.build-wheel.outputs.wheel-path }}
  release-created:
    description: 'Whether a release was created (release-plz command)'
    value: ${{ steps.release-plz-release.outputs.release-created }}
  pr-created:
    description: 'Whether a PR was created (release-plz command)'
    value: ${{ steps.release-plz-pr.outputs.pr-created }}
  version:
    description: 'Released version (release-plz command)'
    value: ${{ steps.release-plz-release.outputs.version }}

runs:
  using: 'composite'
  steps:
    # Install system dependencies (Ubuntu)
    - name: Install system dependencies
      if: runner.os == 'Linux' && inputs.command != 'release-plz'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          pkg-config \
          libssl-dev \
          musl-tools \
          curl \
          git

    # Common setup steps for all commands
    - name: Install Rust toolchain
      if: inputs.command != 'release-plz'
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ inputs.rust_toolchain }}
        components: rustfmt,clippy
        targets: ${{ inputs.target }}

    - name: Get Rust version
      id: rust-version
      if: inputs.command != 'release-plz'
      shell: bash
      run: |
        version=$(rustc --version)
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "🦀 Installed Rust: $version"
        echo "📦 Cargo version: $(cargo --version)"
        echo "🎯 Target: ${{ inputs.target }}"

    - name: Rust cache
      if: inputs.command != 'release-plz'
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: "rust-toolkit-cache"

    # CI-specific steps
    - name: Check formatting
      if: inputs.command == 'ci' && inputs.check_format == 'true'
      shell: bash
      run: |
        echo "🎨 Checking code formatting..."
        cargo fmt --all --check

    - name: Run clippy
      if: inputs.command == 'ci' && inputs.check_clippy == 'true'
      shell: bash
      run: |
        echo "📎 Running clippy lints..."
        cargo clippy ${{ inputs.clippy_args }}

    - name: Check documentation
      if: inputs.command == 'ci' && inputs.check_docs == 'true'
      shell: bash
      env:
        RUSTDOCFLAGS: -D warnings
      run: |
        echo "📚 Checking documentation..."
        cargo doc --no-deps --document-private-items --workspace

    - name: Run tests
      if: inputs.command == 'ci'
      shell: bash
      run: |
        echo "🧪 Running tests..."
        cargo test --verbose --workspace

    # Release-specific steps
    - name: Setup cross-compilation toolchain
      if: inputs.command == 'release'
      uses: taiki-e/setup-cross-toolchain-action@v1
      with:
        target: ${{ inputs.target }}
      continue-on-error: true

    - name: Install cross for musl targets
      if: inputs.command == 'release' && contains(inputs.target, '-musl')
      uses: taiki-e/install-action@v2
      with:
        tool: cross

    - name: Configure OpenSSL for musl targets
      if: inputs.command == 'release' && contains(inputs.target, '-musl')
      shell: bash
      run: |
        echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=/usr/include/openssl" >> $GITHUB_ENV
        echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

    - name: Configure Windows static linking
      if: inputs.command == 'release' && endsWith(inputs.target, 'windows-msvc')
      shell: bash
      run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"

    - name: Configure proc-macro cross-compilation
      if: inputs.command == 'release'
      shell: bash
      run: |
        echo "🔧 Configuring proc-macro cross-compilation for target: ${{ inputs.target }}"

        # Critical fix: Ensure proc-macros are NEVER built for target platform
        # Always ensure host toolchain is available for proc-macro compilation
        echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER=" >> $GITHUB_ENV

        # Only set CARGO_BUILD_TARGET for actual cross-compilation scenarios
        # This ensures proc-macros are built for host platform while final binary is built for target
        if [ "${{ inputs.target }}" != "x86_64-unknown-linux-gnu" ] && [ "${{ runner.os }}" == "Linux" ]; then
          echo "CARGO_BUILD_TARGET=${{ inputs.target }}" >> $GITHUB_ENV
          echo "📦 Cross-compilation enabled: proc-macros will use host (x86_64-linux), binary will use target (${{ inputs.target }})"
        else
          echo "📦 Native compilation: proc-macros and binary both use host platform"
        fi

        # Ensure host toolchain is always available for proc-macros
        rustup target add x86_64-unknown-linux-gnu || true

    - name: Build and upload binary
      id: build-binary
      if: inputs.command == 'release'
      uses: taiki-e/upload-rust-binary-action@v1
      with:
        bin: ${{ inputs.binary_name }}
        target: ${{ inputs.target }}
        tar: all
        zip: windows
        token: ${{ inputs.github_token }}

    # Python wheel building (conditional)
    - name: Check for pyproject.toml
      id: check-pyproject
      if: inputs.command == 'release' && inputs.enable_python_wheels == 'true'
      shell: bash
      run: |
        if [ -f "pyproject.toml" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "🐍 pyproject.toml found, proceeding with Python wheel build"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "⚠️ pyproject.toml not found, skipping Python wheel build"
        fi

    - name: Set up Python
      if: inputs.command == 'release' && inputs.enable_python_wheels == 'true' && steps.check-pyproject.outputs.exists == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Setup cross-compilation for Python wheels (Linux ARM64)
      if: inputs.command == 'release' && inputs.enable_python_wheels == 'true' && steps.check-pyproject.outputs.exists == 'true' && runner.os == 'Linux' && inputs.target == 'aarch64-unknown-linux-gnu'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    - name: Install maturin
      if: inputs.command == 'release' && inputs.enable_python_wheels == 'true' && steps.check-pyproject.outputs.exists == 'true'
      shell: bash
      run: pip install maturin[patchelf]

    - name: Build Python wheels
      id: build-wheel
      if: inputs.command == 'release' && inputs.enable_python_wheels == 'true' && steps.check-pyproject.outputs.exists == 'true'
      shell: bash
      run: |
        maturin build --release --target ${{ inputs.target }}
        wheel_path=$(find target/wheels -name "*.whl" | head -1)
        echo "wheel-path=$wheel_path" >> $GITHUB_OUTPUT

    - name: Upload wheels to release
      if: inputs.command == 'release' && inputs.enable_python_wheels == 'true' && steps.check-pyproject.outputs.exists == 'true' && steps.build-wheel.outputs.wheel-path != ''
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.build-wheel.outputs.wheel-path }}
        token: ${{ inputs.github_token }}

    # Release-plz steps
    - name: Checkout repository (for release-plz)
      if: inputs.command == 'release-plz'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.release_plz_token || inputs.github_token }}

    - name: Install Rust toolchain (for release-plz)
      if: inputs.command == 'release-plz'
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ inputs.rust_toolchain }}

    # Note: GitHub Actions composite actions don't support dynamic 'uses' expressions
    # So we use the default version and let users override in their workflows if needed
    - name: Run release-plz release
      id: release-plz-release
      if: inputs.command == 'release-plz' && (inputs.release_plz_command == 'release' || inputs.release_plz_command == 'both')
      uses: release-plz/action@v0.5
      with:
        command: release
      env:
        GITHUB_TOKEN: ${{ inputs.release_plz_token || inputs.github_token }}
        CARGO_REGISTRY_TOKEN: ${{ inputs.cargo_registry_token }}

    - name: Run release-plz release-pr
      id: release-plz-pr
      if: inputs.command == 'release-plz' && (inputs.release_plz_command == 'release-pr' || inputs.release_plz_command == 'both')
      uses: release-plz/action@v0.5
      with:
        command: release-pr
      env:
        GITHUB_TOKEN: ${{ inputs.release_plz_token || inputs.github_token }}
        CARGO_REGISTRY_TOKEN: ${{ inputs.cargo_registry_token }}

    - name: Output release-plz results
      if: inputs.command == 'release-plz'
      shell: bash
      run: |
        echo "Release-plz completed successfully!"
        if [[ "${{ inputs.release_plz_command }}" == "release" || "${{ inputs.release_plz_command }}" == "both" ]]; then
          echo "Release command executed"
        fi
        if [[ "${{ inputs.release_plz_command }}" == "release-pr" || "${{ inputs.release_plz_command }}" == "both" ]]; then
          echo "Release PR command executed"
        fi

branding:
  icon: 'package'
  color: 'orange'
