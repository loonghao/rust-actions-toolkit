name: 'Rust Actions Toolkit'
description: 'ðŸ¦€ Universal GitHub Actions toolkit for Rust projects - CI/CD, cross-platform builds, releases, and Python wheels'
author: 'loonghao'

inputs:
  command:
    description: 'Command to run: ci, release, release-plz, or setup'
    required: true
    default: 'ci'
  
  # Common inputs
  rust-toolchain:
    description: 'Rust toolchain version'
    required: false
    default: 'stable'
  
  # CI specific inputs
  check-format:
    description: 'Run cargo fmt --check (ci command)'
    required: false
    default: 'true'
  check-clippy:
    description: 'Run cargo clippy (ci command)'
    required: false
    default: 'true'
  check-docs:
    description: 'Run cargo doc (ci command)'
    required: false
    default: 'true'
  clippy-args:
    description: 'Additional arguments for clippy (ci command)'
    required: false
    default: '--all-targets --all-features -- -D warnings'
  
  # Release specific inputs
  target:
    description: 'Target platform for release (release command)'
    required: false
    default: ''
  binary-name:
    description: 'Binary name to release (release command)'
    required: false
    default: ''
  enable-python-wheels:
    description: 'Enable Python wheel building (release command)'
    required: false
    default: 'true'
  github-token:
    description: 'GitHub token for release uploads (release command)'
    required: false
    default: ${{ github.token }}

  # Release-plz specific inputs
  cargo-registry-token:
    description: 'Cargo registry token for crates.io publishing (release-plz command)'
    required: false
    default: ''
  release-plz-version:
    description: 'Release-plz action version (release-plz command)'
    required: false
    default: 'v0.5'
  release-plz-token:
    description: 'Enhanced GitHub PAT for cross-workflow triggers (release-plz command)'
    required: false
    default: ''
  release-plz-command:
    description: 'Release-plz command: release, release-pr, or both (release-plz command)'
    required: false
    default: 'both'

outputs:
  rust-version:
    description: 'Installed Rust version'
    value: ${{ steps.setup.outputs.rust-version || steps.ci.outputs.rust-version }}
  binary-path:
    description: 'Path to the built binary (release command)'
    value: ${{ steps.release.outputs.binary-path }}
  wheel-path:
    description: 'Path to the built Python wheel (release command)'
    value: ${{ steps.release.outputs.wheel-path }}
  release-created:
    description: 'Whether a release was created (release-plz command)'
    value: ${{ steps.release-plz.outputs.release-created }}
  pr-created:
    description: 'Whether a PR was created (release-plz command)'
    value: ${{ steps.release-plz.outputs.pr-created }}
  version:
    description: 'Released version (release-plz command)'
    value: ${{ steps.release-plz.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Setup Rust CI
      id: ci
      if: inputs.command == 'ci'
      uses: ./actions/setup-rust-ci
      with:
        toolchain: ${{ inputs.rust-toolchain }}
        check-format: ${{ inputs.check-format }}
        check-clippy: ${{ inputs.check-clippy }}
        check-docs: ${{ inputs.check-docs }}
        clippy-args: ${{ inputs.clippy-args }}

    - name: Setup Rust (for setup command)
      id: setup
      if: inputs.command == 'setup'
      uses: ./actions/setup-rust-ci
      with:
        toolchain: ${{ inputs.rust-toolchain }}
        check-format: 'false'
        check-clippy: 'false'
        check-docs: 'false'

    - name: Rust Release
      id: release
      if: inputs.command == 'release'
      uses: ./actions/rust-release
      with:
        toolchain: ${{ inputs.rust-toolchain }}
        target: ${{ inputs.target }}
        binary-name: ${{ inputs.binary-name }}
        enable-python-wheels: ${{ inputs.enable-python-wheels }}
        github-token: ${{ inputs.github-token }}

    - name: Release-plz
      id: release-plz
      if: inputs.command == 'release-plz'
      uses: ./actions/release-plz
      with:
        command: ${{ inputs.release-plz-command }}
        toolchain: ${{ inputs.rust-toolchain }}
        release_plz_version: ${{ inputs.release-plz-version }}
        cargo_registry_token: ${{ inputs.cargo-registry-token }}
        github_token: ${{ inputs.github-token }}
        release_plz_token: ${{ inputs.release-plz-token }}

branding:
  icon: 'package'
  color: 'orange'
