name: Build and Push Docker Images

on:
  push:
    branches: [master]
    paths:
      - 'docker/**'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [master]
    paths:
      - 'docker/**'
      - '.github/workflows/docker-build.yml'
  schedule:
    # Rebuild weekly to get security updates
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: loonghao/rust-toolkit

jobs:
  build-base:
    name: Build Base Image
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-base
            type=ref,event=pr,suffix=-base
            type=raw,value=base,enable={{is_default_branch}}
            type=raw,value=latest-base,enable={{is_default_branch}}

      - name: Build and push base image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/base.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-specialized:
    name: Build Specialized Images
    runs-on: ubuntu-latest
    needs: build-base
    if: github.event_name != 'pull_request' || needs.build-base.result == 'success'
    strategy:
      matrix:
        image: [cross-compile, python-wheels, security-audit]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.image }}
            type=ref,event=pr,suffix=-${{ matrix.image }}
            type=raw,value=${{ matrix.image }},enable={{is_default_branch}}
            type=raw,value=latest-${{ matrix.image }},enable={{is_default_branch}}

      - name: Build and push specialized image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/${{ matrix.image }}.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base

  test-images:
    name: Test Docker Images
    runs-on: ubuntu-latest
    needs: [build-base, build-specialized]
    if: always() && (needs.build-base.result == 'success' || needs.build-specialized.result == 'success')
    strategy:
      matrix:
        image: [base, cross-compile, python-wheels, security-audit]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test ${{ matrix.image }} image
        run: |
          echo "üß™ Testing ${{ matrix.image }} image..."
          
          # Basic functionality test
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.image }} \
            bash -c "rustc --version && cargo --version"
          
          # Image-specific tests
          case "${{ matrix.image }}" in
            "cross-compile")
              docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.image }} \
                bash -c "cross --version && rustup target list --installed"
              ;;
            "python-wheels")
              docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.image }} \
                bash -c "maturin --version && python3 --version"
              ;;
            "security-audit")
              docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.image }} \
                bash -c "cargo audit --version && cargo deny --version"
              ;;
          esac
          
          echo "‚úÖ ${{ matrix.image }} image test passed!"

  update-readme:
    name: Update README with Docker info
    runs-on: ubuntu-latest
    needs: [build-base, build-specialized]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with Docker images
        run: |
          echo "üìù Updating README with Docker image information..."
          # This would update the README with current image tags and sizes
          # Implementation depends on specific requirements

      - name: Commit README updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add README.md
            git commit -m "docs: update Docker image information [skip ci]"
            git push
          fi
