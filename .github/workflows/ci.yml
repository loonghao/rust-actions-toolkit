name: CI

# CI workflow for rust-actions-toolkit
# Tests the GitHub Actions toolkit itself
# Validates action.yml files and ensures everything works correctly

on:
  pull_request:
    branches: [main]
  push:
    branches: [main, develop]

permissions:
  contents: read
  actions: read

jobs:
  # Lint GitHub Actions workflows and actions
  actionlint:
    name: Lint GitHub Actions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install actionlint
        run: |
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          sudo mv ./actionlint /usr/local/bin/

      - name: Lint workflows
        run: |
          echo "üîç Linting GitHub Actions workflows..."
          actionlint -verbose
          echo "‚úÖ All workflows passed actionlint validation"

      - name: Lint with shellcheck integration
        run: |
          echo "üîç Running actionlint with shellcheck integration..."
          # Install shellcheck for better shell script validation
          sudo apt-get update && sudo apt-get install -y shellcheck
          actionlint -verbose -shellcheck=""
          echo "‚úÖ All workflows passed shellcheck validation"

  # Validate GitHub Actions
  validate-actions:
    name: Validate Actions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate main action.yml
        run: |
          if [ ! -f action.yml ]; then
            echo "‚ùå action.yml not found"
            exit 1
          fi

          # Check required fields
          if ! grep -q "name:" action.yml; then
            echo "‚ùå Missing 'name' field in action.yml"
            exit 1
          fi

          if ! grep -q "description:" action.yml; then
            echo "‚ùå Missing 'description' field in action.yml"
            exit 1
          fi

          if ! grep -q "branding:" action.yml; then
            echo "‚ùå Missing 'branding' field in action.yml"
            exit 1
          fi

          echo "‚úÖ Main action.yml validation passed"

      - name: Validate composite actions
        run: |
          for action_dir in actions/*/; do
            if [ -d "$action_dir" ]; then
              action_file="${action_dir}action.yml"
              if [ ! -f "$action_file" ]; then
                echo "‚ùå Missing action.yml in $action_dir"
                exit 1
              fi

              if ! grep -q "name:" "$action_file"; then
                echo "‚ùå Missing 'name' field in $action_file"
                exit 1
              fi

              if ! grep -q "description:" "$action_file"; then
                echo "‚ùå Missing 'description' field in $action_file"
                exit 1
              fi

              echo "‚úÖ $action_file validation passed"
            fi
          done

      - name: Validate reusable workflows
        run: |
          for workflow in .github/workflows/reusable-*.yml; do
            if [ -f "$workflow" ]; then
              if ! grep -q "workflow_call:" "$workflow"; then
                echo "‚ùå $workflow is not a reusable workflow"
                exit 1
              fi
              echo "‚úÖ $workflow validation passed"
            fi
          done

      - name: Validate workflow syntax with yq
        run: |
          # Install yq for YAML validation
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

          echo "üîç Validating YAML syntax for all workflows..."
          for workflow in .github/workflows/*.yml; do
            if [ -f "$workflow" ]; then
              echo "Validating $workflow..."
              if ! yq eval '.' "$workflow" > /dev/null 2>&1; then
                echo "‚ùå Invalid YAML syntax in $workflow"
                exit 1
              fi
              echo "‚úÖ $workflow has valid YAML syntax"
            fi
          done

      - name: Validate action.yml files syntax
        run: |
          echo "üîç Validating YAML syntax for all action.yml files..."

          # Validate main action.yml
          if [ -f "action.yml" ]; then
            echo "Validating action.yml..."
            if ! yq eval '.' action.yml > /dev/null 2>&1; then
              echo "‚ùå Invalid YAML syntax in action.yml"
              exit 1
            fi
            echo "‚úÖ action.yml has valid YAML syntax"
          fi

          # Validate composite actions
          for action_file in actions/*/action.yml; do
            if [ -f "$action_file" ]; then
              echo "Validating $action_file..."
              if ! yq eval '.' "$action_file" > /dev/null 2>&1; then
                echo "‚ùå Invalid YAML syntax in $action_file"
                exit 1
              fi
              echo "‚úÖ $action_file has valid YAML syntax"
            fi
          done

  # Test our composite actions
  test-actions:
    name: Test Actions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test setup-rust-ci action
        uses: ./actions/setup-rust-ci
        with:
          toolchain: stable
          check-format: false
          check-clippy: false
          check-docs: false

      - name: Verify Rust installation
        run: |
          rustc --version
          cargo --version
          echo "‚úÖ Rust toolchain installed successfully"

  # Test new setup-build-env action
  test-build-env:
    name: Test Build Environment Setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-musl
          - os: ubuntu-22.04
            target: x86_64-pc-windows-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test setup-build-env action
        uses: ./.github/actions/setup-build-env
        with:
          target: ${{ matrix.target }}
          os: ${{ matrix.os }}
          rust-toolchain: stable

      - name: Verify environment setup
        run: |
          echo "üîç Verifying build environment..."
          rustc --version
          cargo --version

          # Check if target is installed
          rustup target list --installed | grep "${{ matrix.target }}" || echo "‚ö†Ô∏è Target not found"

          # Test basic build (if we have a Cargo.toml)
          if [ -f "Cargo.toml" ]; then
            echo "Testing basic build..."
            cargo check --target ${{ matrix.target }} || echo "‚ö†Ô∏è Build check failed (expected for toolkit project)"
          fi

          echo "‚úÖ Build environment test completed"

  # Validate example configurations
  validate-examples:
    name: Validate Example Configurations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install actionlint
        run: |
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          sudo mv ./actionlint /usr/local/bin/

      - name: Install yq for YAML validation
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Validate example workflow files
        run: |
          echo "üîç Validating example workflow configurations..."

          # Find all example workflow files
          example_workflows=$(find examples -name "*.yml" -type f | grep -E "(ci|release|workflow)" || true)

          if [ -z "$example_workflows" ]; then
            echo "‚ÑπÔ∏è No example workflow files found"
            exit 0
          fi

          for workflow in $example_workflows; do
            echo "Validating $workflow..."

            # Check YAML syntax
            if ! yq eval '.' "$workflow" > /dev/null 2>&1; then
              echo "‚ùå Invalid YAML syntax in $workflow"
              exit 1
            fi

            # Check if it's a valid GitHub Actions workflow
            if yq eval '.jobs' "$workflow" > /dev/null 2>&1; then
              echo "‚úÖ $workflow has valid workflow structure"
            else
              echo "‚ö†Ô∏è $workflow might not be a complete workflow (could be a template)"
            fi
          done

          echo "‚úÖ All example configurations validated"

      - name: Check for version consistency in examples
        run: |
          echo "üîç Checking version consistency in example files..."

          # Find all references to rust-actions-toolkit versions
          version_refs=$(grep -r "rust-actions-toolkit.*@v" examples/ || true)

          if [ -n "$version_refs" ]; then
            echo "Found version references:"
            echo "$version_refs"

            # Check if all versions are consistent (should be latest)
            latest_version="v2.3.2"  # Update this when releasing new versions

            if echo "$version_refs" | grep -v "@$latest_version" | grep -q "@v"; then
              echo "‚ö†Ô∏è Found outdated version references. Consider updating to $latest_version"
              echo "Outdated references:"
              echo "$version_refs" | grep -v "@$latest_version" | grep "@v"
            else
              echo "‚úÖ All version references are up to date"
            fi
          else
            echo "‚ÑπÔ∏è No version references found in examples"
          fi

  # Test documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check README files exist
        run: |
          if [ ! -f README.md ]; then
            echo "‚ùå README.md not found"
            exit 1
          fi

          if [ ! -f README_zh.md ]; then
            echo "‚ùå README_zh.md not found"
            exit 1
          fi

          if [ ! -f USAGE.md ]; then
            echo "‚ùå USAGE.md not found"
            exit 1
          fi

          echo "‚úÖ Documentation files found"

      - name: Check examples exist
        run: |
          if [ ! -d examples ]; then
            echo "‚ùå examples directory not found"
            exit 1
          fi

          if [ ! -d examples/github-action ]; then
            echo "‚ùå examples/github-action directory not found"
            exit 1
          fi

          echo "‚úÖ Example files found"
