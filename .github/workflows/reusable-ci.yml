name: Reusable CI

# Reusable workflow for Rust CI
# Can be called from other repositories

on:
  workflow_call:
    inputs:
      rust-toolchain:
        description: 'Rust toolchain version'
        required: false
        type: string
        default: 'stable'
      cross-version:
        description: 'Cross compilation tool version'
        required: false
        type: string
        default: 'v0.2.5'
      enable-coverage:
        description: 'Enable code coverage reporting'
        required: false
        type: boolean
        default: true
      enable-python-wheel:
        description: 'Enable Python wheel testing'
        required: false
        type: boolean
        default: true
      additional-targets:
        description: 'Additional target platforms (JSON array)'
        required: false
        type: string
        default: '[]'
    secrets:
      CODECOV_TOKEN:
        description: 'Codecov token for coverage reporting'
        required: false

permissions:
  contents: read
  actions: read
  security-events: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CROSS_VERSION: ${{ inputs.cross-version }}

jobs:
  # Code formatting check
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust-toolchain }}
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all --check

  # Clippy linting
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust-toolchain }}
          components: clippy

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Documentation check
  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust-toolchain }}

      - name: Check documentation
        env:
          RUSTDOCFLAGS: -D warnings
        run: cargo doc --no-deps --document-private-items --workspace

  # Comprehensive testing across platforms
  test:
    name: Test - ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS:
      TARGET_DIR: ./target
    strategy:
      fail-fast: false
      matrix:
        include:
          # Default targets
          - build: stable
            os: ubuntu-latest
            rust: ${{ inputs.rust-toolchain }}
            target: x86_64-unknown-linux-gnu
          - build: stable-musl
            os: ubuntu-latest
            rust: ${{ inputs.rust-toolchain }}
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-latest
            rust: ${{ inputs.rust-toolchain }}
            target: x86_64-apple-darwin
          - build: win-msvc
            os: windows-latest
            rust: ${{ inputs.rust-toolchain }}
            target: x86_64-pc-windows-msvc
          - build: win-gnu
            os: windows-latest
            rust: stable-x86_64-gnu
            target: x86_64-pc-windows-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}

      - name: Use Cross
        if: matrix.os == 'ubuntu-latest' && matrix.target != '' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          dir="$RUNNER_TEMP/cross-download"
          mkdir "$dir"
          echo "$dir" >> $GITHUB_PATH
          cd "$dir"
          curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
          tar xf cross-x86_64-unknown-linux-musl.tar.gz
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Build workspace
        run: ${{ env.CARGO }} build --verbose --workspace ${{ env.TARGET_FLAGS }}

      - name: Run tests (sans cross)
        if: matrix.target == '' || matrix.target == 'x86_64-unknown-linux-gnu' || matrix.os != 'ubuntu-latest'
        run: ${{ env.CARGO }} test --verbose --workspace ${{ env.TARGET_FLAGS }}

      - name: Run tests (with cross)
        if: matrix.target != '' && matrix.target != 'x86_64-unknown-linux-gnu' && matrix.os == 'ubuntu-latest'
        run: ${{ env.CARGO }} test --verbose --workspace ${{ env.TARGET_FLAGS }}

  # Security audit using rustsec database
  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security audit
        uses: rustsec/audit-check@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Code coverage reporting
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: ${{ inputs.enable-coverage }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust-toolchain }}

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: false
          verbose: true
          flags: unittests
          name: codecov-umbrella

  # Python wheel testing (conditional)
  python-wheel:
    name: Python Wheel Test
    runs-on: ubuntu-latest
    if: ${{ inputs.enable-python-wheel }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for pyproject.toml
        id: check-pyproject
        run: |
          if [ -f "pyproject.toml" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ pyproject.toml not found, skipping Python wheel test"
          fi

      - name: Set up Python
        if: steps.check-pyproject.outputs.exists == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Rust toolchain
        if: steps.check-pyproject.outputs.exists == 'true'
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust-toolchain }}

      - name: Install maturin
        if: steps.check-pyproject.outputs.exists == 'true'
        run: pip install maturin[patchelf]

      - name: Build Python wheel
        if: steps.check-pyproject.outputs.exists == 'true'
        run: maturin build --release

      - name: Test Python wheel
        if: steps.check-pyproject.outputs.exists == 'true'
        run: |
          pip install target/wheels/*.whl
          python -c "import $(basename $(pwd) | tr '-' '_'); print('Python wheel import successful')"
