name: Reusable CI

# Simple and universal reusable workflow for Rust CI
# Focuses on native compilation for each platform

on:
  workflow_call:
    inputs:
      rust-toolchain:
        description: 'Rust toolchain version'
        required: false
        type: string
        default: 'stable'
      enable-coverage:
        description: 'Enable code coverage reporting'
        required: false
        type: boolean
        default: false
      enable-python-wheel:
        description: 'Enable Python wheel testing'
        required: false
        type: boolean
        default: false
    secrets:
      CODECOV_TOKEN:
        description: 'Codecov token for coverage reporting'
        required: false

# Note: Permissions are inherited from the calling workflow
# The calling workflow should include:
# permissions:
#   contents: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code quality checks
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Run CI checks
        uses: ./
        with:
          command: ci
          rust-toolchain: ${{ inputs.rust-toolchain }}

  # Native testing across platforms
  test:
    name: Test - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Run tests
        uses: ./
        with:
          command: ci
          rust-toolchain: ${{ inputs.rust-toolchain }}

  # Optional: Code coverage
  coverage:
    name: Coverage
    if: ${{ inputs.enable-coverage }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust-toolchain }}
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@f37a1e4d34f3e1c6a571e294b0258f2805eab48d # v2
        with:
          tool: cargo-llvm-cov

      - name: Generate coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        if: ${{ secrets.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238 # v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: false

  # Optional: Python wheel testing
  python-wheel:
    name: Python Wheel Test
    if: ${{ inputs.enable-python-wheel }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Check for pyproject.toml
        id: check-pyproject
        run: |
          if [ -f "pyproject.toml" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "üêç pyproject.toml found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è pyproject.toml not found, skipping Python wheel test"
          fi

      - name: Test Python wheel build
        if: steps.check-pyproject.outputs.exists == 'true'
        uses: ./
        with:
          command: release
          enable-python-wheels: true
          rust-toolchain: ${{ inputs.rust-toolchain }}
