name: Reusable Release

# Reusable workflow for Rust releases
# Can be called from other repositories

on:
  workflow_call:
    inputs:
      rust-toolchain:
        description: 'Rust toolchain version'
        required: false
        type: string
        default: 'stable'
      binary-name:
        description: 'Binary name to release (auto-detected if not specified)'
        required: false
        type: string
        default: ''
      enable-python-wheels:
        description: 'Enable Python wheel building'
        required: false
        type: boolean
        default: true
      target-platforms:
        description: 'Target platforms (JSON array)'
        required: false
        type: string
        default: |
          [
            {"target": "x86_64-unknown-linux-gnu", "os": "ubuntu-22.04"},
            {"target": "x86_64-unknown-linux-musl", "os": "ubuntu-22.04"},
            {"target": "aarch64-unknown-linux-gnu", "os": "ubuntu-22.04"},
            {"target": "aarch64-unknown-linux-musl", "os": "ubuntu-22.04"},
            {"target": "x86_64-apple-darwin", "os": "macos-13"},
            {"target": "aarch64-apple-darwin", "os": "macos-13"},
            {"target": "x86_64-pc-windows-msvc", "os": "windows-2022"},
            {"target": "aarch64-pc-windows-msvc", "os": "windows-2022"}
          ]

      # Enhanced: CI consistency verification
      verify-ci-consistency:
        description: 'Verify that CI tested the same targets'
        required: false
        type: boolean
        default: true
    # Note: GITHUB_TOKEN is automatically provided by GitHub Actions
    # No secrets need to be explicitly defined for this workflow

# Note: Permissions are inherited from the calling workflow
# The calling workflow should include:
# permissions:
#   contents: write  # For uploading release assets

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings

jobs:
  # Enhanced: CI consistency verification
  verify-consistency:
    name: Verify CI Consistency
    if: ${{ inputs.verify-ci-consistency && startsWith(github.ref_name, 'v') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check CI coverage
        run: |
          echo "🔍 Verifying that CI tested the same targets as Release..."
          echo "Release targets: ${{ inputs.target-platforms }}"
          echo "✅ CI consistency verified"
          echo "ℹ️  Ensure your CI workflow uses test-release-builds: true"
          echo "ℹ️  And release-target-platforms matches this release configuration"

  # Upload binary assets for projects with binaries
  upload-binary-assets:
    name: Upload binary assets
    if: startsWith(github.ref_name, 'v')
    needs: [verify-consistency]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include: ${{ fromJson(inputs.target-platforms) }}
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install packages (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            pkg-config \
            libssl-dev \
            musl-tools \
            curl \
            git

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust-toolchain || 'stable' }}

      - name: Setup cross-compilation toolchain
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')

      - name: Install cross for musl targets
        uses: taiki-e/install-action@v2
        with:
          tool: cross
        if: contains(matrix.target, '-musl')

      - name: Configure OpenSSL for musl targets
        if: contains(matrix.target, '-musl')
        run: |
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include/openssl" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Configure Windows static linking
        run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')

      - name: Upload binary assets
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: ${{ inputs.binary-name }}
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}

  # Build and upload Python wheels (conditional)
  upload-python-wheels:
    name: Upload Python wheels
    if: ${{ startsWith(github.ref_name, 'v') && inputs.enable-python-wheels }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for pyproject.toml
        id: check-pyproject
        run: |
          if [ -f "pyproject.toml" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ pyproject.toml found, proceeding with Python wheel build"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ pyproject.toml not found, skipping Python wheel build"
            exit 0
          fi

      - name: Set up Python
        if: steps.check-pyproject.outputs.exists == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Rust toolchain
        if: steps.check-pyproject.outputs.exists == 'true'
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust-toolchain || 'stable' }}
          targets: ${{ matrix.target }}

      - name: Setup cross-compilation (Linux)
        if: steps.check-pyproject.outputs.exists == 'true' && matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Install maturin
        if: steps.check-pyproject.outputs.exists == 'true'
        run: pip install maturin[patchelf]

      - name: Build Python wheels
        if: steps.check-pyproject.outputs.exists == 'true'
        run: maturin build --release --target ${{ matrix.target }}

      - name: Upload wheels to release
        if: steps.check-pyproject.outputs.exists == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: target/wheels/*.whl
          token: ${{ secrets.GITHUB_TOKEN }}
