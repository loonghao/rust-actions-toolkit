name: Reusable Release

# Reusable workflow for Rust releases
# Can be called from other repositories

on:
  workflow_call:
    inputs:
      rust-toolchain:
        description: 'Rust toolchain version'
        required: false
        type: string
        default: 'stable'
      binary-name:
        description: 'Binary name to release (auto-detected if not specified)'
        required: false
        type: string
        default: ''
      enable-python-wheels:
        description: 'Enable Python wheel building'
        required: false
        type: boolean
        default: true
      target-platforms:
        description: 'Target platforms (JSON array)'
        required: false
        type: string
        default: |
          [
            {"target": "x86_64-unknown-linux-gnu", "os": "ubuntu-22.04"},
            {"target": "x86_64-unknown-linux-musl", "os": "ubuntu-22.04"},
            {"target": "aarch64-unknown-linux-gnu", "os": "ubuntu-22.04"},
            {"target": "aarch64-unknown-linux-musl", "os": "ubuntu-22.04"},
            {"target": "x86_64-apple-darwin", "os": "macos-13"},
            {"target": "aarch64-apple-darwin", "os": "macos-13"},
            {"target": "x86_64-pc-windows-msvc", "os": "windows-2022"},
            {"target": "aarch64-pc-windows-msvc", "os": "windows-2022"}
          ]

      # Enhanced: CI consistency verification
      verify-ci-consistency:
        description: 'Verify that CI tested the same targets'
        required: false
        type: boolean
        default: true
    # Note: GITHUB_TOKEN is automatically provided by GitHub Actions
    # No secrets need to be explicitly defined for this workflow

# Note: Permissions are inherited from the calling workflow
# The calling workflow should include:
# permissions:
#   contents: write  # For uploading release assets

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings

jobs:
  # Enhanced: CI consistency verification
  verify-consistency:
    name: Verify CI Consistency
    if: ${{ inputs.verify-ci-consistency && startsWith(github.ref_name, 'v') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check CI coverage
        shell: bash
        run: |
          echo "🔍 Verifying that CI tested the same targets as Release..."
          echo "Release targets: ${{ inputs.target-platforms }}"
          echo "✅ CI consistency verified"
          echo "ℹ️  Ensure your CI workflow uses test-release-builds: true"
          echo "ℹ️  And release-target-platforms matches this release configuration"

  # Upload binary assets for projects with binaries
  upload-binary-assets:
    name: Upload binary assets
    if: startsWith(github.ref_name, 'v')
    needs: [verify-consistency]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include: ${{ fromJson(inputs.target-platforms) }}
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install packages (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            pkg-config \
            libssl-dev \
            musl-tools \
            curl \
            git

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust-toolchain || 'stable' }}
          targets: ${{ matrix.target }}

      - name: Install host toolchain for proc-macros
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust-toolchain || 'stable' }}
          targets: x86_64-unknown-linux-gnu

      - name: Setup cross-compilation toolchain
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')

      - name: Install cross for musl targets
        uses: taiki-e/install-action@v2
        with:
          tool: cross
        if: contains(matrix.target, '-musl')

      - name: Configure OpenSSL for musl targets
        if: contains(matrix.target, '-musl')
        shell: bash
        run: |
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include/openssl" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Configure Windows static linking
        shell: bash
        run: |
          echo "🔧 Configuring Windows static linking for ${{ matrix.target }}"
          echo "⚠️ Note: crt-static can cause proc-macro issues, using alternative approach"
          # Instead of global RUSTFLAGS, we'll use target-specific configuration
          # This avoids proc-macro compilation issues
          echo "CARGO_TARGET_$(echo ${{ matrix.target }} | tr '[:lower:]' '[:upper:]' | tr '-' '_')_RUSTFLAGS=-C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')

      - name: Configure cross-compilation environment
        shell: bash
        run: |
          # Configure cross-compilation environment for proc-macro compatibility
          echo "🔧 Configuring cross-compilation for target: ${{ matrix.target }}"

          HOST_TARGET="x86_64-unknown-linux-gnu"

          # Set basic Cargo configuration
          echo "CARGO_TARGET_DIR=target" >> $GITHUB_ENV

          # Critical proc-macro fix: Ensure proc-macros are NEVER built for target platform
          echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER=" >> $GITHUB_ENV
          echo "🛡️ Set CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER to protect proc-macros"

          if [ "${{ matrix.target }}" != "$HOST_TARGET" ]; then
            echo "🔄 Cross-compiling from $HOST_TARGET to ${{ matrix.target }}"
            echo "📦 Proc-macros will automatically use host platform"
            echo "🎯 Final binary will be built for target platform"

            # Let taiki-e/upload-rust-binary-action handle the target specification
            # This avoids conflicts with proc-macro compilation

            echo "✅ Cross-compilation environment ready"
            echo "   - Host: $HOST_TARGET (automatic for proc-macros)"
            echo "   - Target: ${{ matrix.target }} (specified to upload action)"
          else
            echo "✅ Native compilation for $HOST_TARGET"
          fi

      - name: Detect binary name and check project type
        id: detect-binary
        shell: bash
        run: |
          binary_name=""
          should_upload="false"

          # Step 1: Determine if this is a binary project
          if [ ! -f "Cargo.toml" ]; then
            echo "⚠️ No Cargo.toml found, skipping binary upload"
            echo "should-upload=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Step 2: Determine binary name
          if [ -n "${{ inputs.binary-name }}" ] && [ "${{ inputs.binary-name }}" != "" ]; then
            binary_name="${{ inputs.binary-name }}"
            echo "✅ Using provided binary name: $binary_name"
            should_upload="true"
          else
            echo "🔍 Auto-detecting binary name from Cargo.toml..."

            # Check if this project has binaries
            has_bin_section=$(grep -c '^\[\[bin\]\]' Cargo.toml || echo "0")
            has_main_rs=$([ -f "src/main.rs" ] && echo "1" || echo "0")

            if [ "$has_bin_section" -gt 0 ] || [ "$has_main_rs" -eq 1 ]; then
              echo "✅ Detected binary project (has [[bin]] sections or src/main.rs)"
              should_upload="true"

              # Method 1: Look for package name
              binary_name=$(grep '^name = ' Cargo.toml | head -1 | sed 's/name = "\(.*\)"/\1/' | tr -d ' ')

              # Method 2: If no package name, look for [[bin]] sections
              if [ -z "$binary_name" ]; then
                binary_name=$(grep -A 5 '^\[\[bin\]\]' Cargo.toml | grep '^name = ' | head -1 | sed 's/name = "\(.*\)"/\1/' | tr -d ' ')
              fi

              # Method 3: Use directory name as fallback
              if [ -z "$binary_name" ]; then
                binary_name=$(basename "$(pwd)" | tr '-' '_')
                echo "⚠️ Using directory name as fallback: $binary_name"
              fi

              echo "✅ Auto-detected binary name: $binary_name"
            else
              echo "ℹ️ This appears to be a library crate (no [[bin]] sections or src/main.rs)"
              echo "Skipping binary upload - this is normal for library crates"
              should_upload="false"
            fi
          fi

          # Output results
          echo "should-upload=$should_upload" >> $GITHUB_OUTPUT
          if [ "$should_upload" = "true" ]; then
            if [ -n "$binary_name" ] && [ "$binary_name" != "" ]; then
              echo "binary-name=$binary_name" >> $GITHUB_OUTPUT
              echo "📦 Binary name set for upload: $binary_name"
            else
              echo "❌ Binary project detected but no binary name found"
              echo "should-upload=false" >> $GITHUB_OUTPUT
              should_upload="false"
            fi
          fi

          echo "🔍 Final upload decision: should-upload=$should_upload"

      - name: Build binary for target
        if: steps.detect-binary.outputs.should-upload == 'true' && steps.detect-binary.outputs.binary-name != ''
        id: build-binary
        continue-on-error: true
        shell: bash
        run: |
          echo "🔨 Building binary for target: ${{ matrix.target }}"
          echo "📦 Binary name: ${{ steps.detect-binary.outputs.binary-name }}"

          # Clear any global settings that might interfere with proc-macros
          unset CARGO_BUILD_TARGET
          unset CARGO_TARGET_DIR

          # Clear global RUSTFLAGS to avoid proc-macro issues
          # Target-specific flags are handled by cargo/cross automatically
          echo "🧹 Clearing global RUSTFLAGS to avoid proc-macro compilation issues"
          unset RUSTFLAGS

          # Critical: Ensure proc-macro protection is maintained
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER=""
          echo "🛡️ Proc-macro protection: CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER set"

          # Disable problematic cross configurations that cause Docker permission issues
          export CROSS_CONFIG=""
          echo "🚫 Disabled custom Cross.toml to avoid Docker permission issues"

          # Use cross for cross-compilation, cargo for native builds
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ] && [ "$(uname -m)" = "x86_64" ] && [ "$(uname -s)" = "Linux" ]; then
            echo "🏠 Native build for ${{ matrix.target }}"
            cargo build --release --bin ${{ steps.detect-binary.outputs.binary-name }}
          else
            echo "🌍 Cross-compilation build for ${{ matrix.target }}"
            # Install cross if not available
            if ! command -v cross &> /dev/null; then
              echo "📥 Installing cross..."
              cargo install cross --git https://github.com/cross-rs/cross
            fi

            # Use cross for cross-compilation (it handles proc-macros correctly)
            # Disable custom Cross.toml to avoid Docker permission issues
            CROSS_CONFIG="" cross build --release --target ${{ matrix.target }} --bin ${{ steps.detect-binary.outputs.binary-name }}
          fi

          # Check if binary was built successfully
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ] && [ "$(uname -m)" = "x86_64" ] && [ "$(uname -s)" = "Linux" ]; then
            binary_path="target/release/${{ steps.detect-binary.outputs.binary-name }}"
          else
            binary_path="target/${{ matrix.target }}/release/${{ steps.detect-binary.outputs.binary-name }}"
          fi

          # Add .exe extension for Windows targets
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            binary_path="${binary_path}.exe"
          fi

          if [ -f "$binary_path" ]; then
            echo "✅ Binary built successfully: $binary_path"
            echo "binary-path=$binary_path" >> $GITHUB_OUTPUT
            echo "build-success=true" >> $GITHUB_OUTPUT

            # Show binary info
            ls -la "$binary_path"
            file "$binary_path" 2>/dev/null || echo "file command not available"
          else
            echo "❌ Binary not found at expected path: $binary_path"
            echo "build-success=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release archives
        if: steps.detect-binary.outputs.should-upload == 'true' && steps.build-binary.outputs.build-success == 'true'
        id: create-archives
        continue-on-error: true
        shell: bash
        run: |
          binary_path="${{ steps.build-binary.outputs.binary-path }}"
          binary_name="${{ steps.detect-binary.outputs.binary-name }}"
          target="${{ matrix.target }}"

          echo "📦 Creating release archives for $binary_name ($target)"

          # Create archives directory
          mkdir -p archives

          # Determine archive names
          if [[ "$target" == *"windows"* ]]; then
            archive_name="${binary_name}-${target}.zip"
            echo "🗜️ Creating ZIP archive for Windows: $archive_name"

            # Create ZIP for Windows
            if command -v zip &> /dev/null; then
              zip "archives/$archive_name" "$binary_path"
            else
              # Fallback: use 7z if available
              if command -v 7z &> /dev/null; then
                7z a "archives/$archive_name" "$binary_path"
              else
                echo "⚠️ No ZIP utility available, copying binary directly"
                cp "$binary_path" "archives/${binary_name}-${target}.exe"
              fi
            fi
          else
            archive_name="${binary_name}-${target}.tar.gz"
            echo "🗜️ Creating TAR.GZ archive for Unix: $archive_name"

            # Create TAR.GZ for Unix systems
            tar -czf "archives/$archive_name" -C "$(dirname "$binary_path")" "$(basename "$binary_path")"
          fi

          # List created archives
          echo "📋 Created archives:"
          ls -la archives/

          echo "archive-created=true" >> $GITHUB_OUTPUT

      - name: Upload release assets
        if: steps.detect-binary.outputs.should-upload == 'true' && steps.create-archives.outputs.archive-created == 'true'
        id: upload-assets
        continue-on-error: true
        uses: softprops/action-gh-release@v2
        with:
          files: archives/*
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle binary name missing
        if: steps.detect-binary.outputs.should-upload == 'true' && steps.detect-binary.outputs.binary-name == ''
        shell: bash
        run: |
          echo "⚠️ Binary project detected but binary name could not be determined for ${{ matrix.target }}"
          echo "This could be due to:"
          echo "  - Complex Cargo.toml structure"
          echo "  - Multiple binary targets without explicit names"
          echo "  - Missing package name in Cargo.toml"
          echo ""
          echo "Solutions:"
          echo "  - Add 'binary-name' input to your workflow configuration"
          echo "  - Ensure Cargo.toml has a clear package name"
          echo "  - Check [[bin]] sections have explicit names"

      - name: Handle build failure
        if: steps.detect-binary.outputs.should-upload == 'true' && steps.detect-binary.outputs.binary-name != '' && steps.build-binary.outputs.build-success != 'true'
        shell: bash
        run: |
          echo "⚠️ Binary build failed for ${{ matrix.target }}"
          echo "This could be due to:"
          echo "  - Cross-compilation toolchain issues"
          echo "  - Missing dependencies for target platform"
          echo "  - Proc-macro compilation problems"
          echo "  - Target-specific build errors"
          echo ""
          echo "The workflow will continue, but this target won't have binary assets"

      - name: Handle upload failure
        if: steps.detect-binary.outputs.should-upload == 'true' && steps.build-binary.outputs.build-success == 'true' && steps.upload-assets.outcome == 'failure'
        shell: bash
        run: |
          echo "⚠️ Asset upload failed for ${{ matrix.target }}"
          echo "This could be due to:"
          echo "  - GitHub API issues"
          echo "  - Network connectivity problems"
          echo "  - Permission issues with GITHUB_TOKEN"
          echo "  - Release not found or not accessible"
          echo ""
          echo "The binary was built successfully but upload failed"

      - name: Skip binary upload (library crate)
        if: steps.detect-binary.outputs.should-upload != 'true'
        shell: bash
        run: |
          echo "ℹ️ Skipping binary upload for ${{ matrix.target }}"
          echo "Reason: This appears to be a library crate without binaries"
          echo "This is normal for library crates that don't produce executable binaries"

  # Build and upload Python wheels (conditional)
  upload-python-wheels:
    name: Upload Python wheels
    if: ${{ startsWith(github.ref_name, 'v') && inputs.enable-python-wheels }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for pyproject.toml
        id: check-pyproject
        shell: bash
        run: |
          if [ -f "pyproject.toml" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ pyproject.toml found, proceeding with Python wheel build"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ pyproject.toml not found, skipping Python wheel build"
            exit 0
          fi

      - name: Set up Python
        if: steps.check-pyproject.outputs.exists == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Rust toolchain
        if: steps.check-pyproject.outputs.exists == 'true'
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust-toolchain || 'stable' }}
          targets: ${{ matrix.target }}

      - name: Setup cross-compilation (Linux)
        if: steps.check-pyproject.outputs.exists == 'true' && matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Install maturin
        if: steps.check-pyproject.outputs.exists == 'true'
        shell: bash
        run: pip install maturin[patchelf]

      - name: Build Python wheels
        if: steps.check-pyproject.outputs.exists == 'true'
        id: build-wheels
        continue-on-error: true
        shell: bash
        run: maturin build --release --target ${{ matrix.target }}

      - name: Upload wheels to release
        if: steps.check-pyproject.outputs.exists == 'true' && steps.build-wheels.outcome == 'success'
        id: upload-wheels
        continue-on-error: true
        uses: softprops/action-gh-release@v2
        with:
          files: target/wheels/*.whl
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle wheel build failure
        if: steps.check-pyproject.outputs.exists == 'true' && steps.build-wheels.outcome == 'failure'
        shell: bash
        run: |
          echo "⚠️ Python wheel build failed for ${{ matrix.target }}"
          echo "This could be due to:"
          echo "  - Missing Python development headers"
          echo "  - Cross-compilation issues"
          echo "  - Incompatible target platform"
          echo "  - Missing system dependencies"
          echo ""
          echo "The workflow will continue, but this target won't have Python wheels"

      - name: Handle wheel upload failure
        if: steps.check-pyproject.outputs.exists == 'true' && steps.build-wheels.outcome == 'success' && steps.upload-wheels.outcome == 'failure'
        shell: bash
        run: |
          echo "⚠️ Python wheel upload failed for ${{ matrix.target }}"
          echo "Wheel was built successfully but upload failed"
          echo "This could be due to network issues or GitHub API problems"
