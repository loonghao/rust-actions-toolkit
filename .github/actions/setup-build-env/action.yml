# Setup Build Environment Action
# Unified build environment setup to ensure CI and Release consistency

name: 'Setup Build Environment'
description: 'Setup consistent build environment for CI and Release workflows'
author: 'rust-actions-toolkit'

inputs:
  target:
    description: 'Target platform (e.g., x86_64-pc-windows-gnu)'
    required: true
  os:
    description: 'Operating system (e.g., ubuntu-22.04, windows-2022, macos-13)'
    required: true
  rust-toolchain:
    description: 'Rust toolchain version'
    required: false
    default: 'stable'
  enable-cross:
    description: 'Enable cross-compilation tools'
    required: false
    default: 'true'
  docker-image:
    description: 'Custom Docker image for cross-compilation'
    required: false
    default: ''

outputs:
  cargo-command:
    description: 'Cargo command to use (cargo or cross)'
    value: ${{ steps.setup-cargo.outputs.command }}
  target-dir:
    description: 'Target directory for build artifacts'
    value: ${{ steps.setup-cargo.outputs.target-dir }}

runs:
  using: 'composite'
  steps:
    - name: Install system packages (Ubuntu)
      if: startsWith(inputs.os, 'ubuntu')
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          pkg-config \
          libssl-dev \
          musl-tools \
          curl \
          git \
          file
    
    - name: Install system packages (macOS)
      if: startsWith(inputs.os, 'macos')
      shell: bash
      run: |
        # macOS usually has necessary tools already
        echo "macOS build environment ready"
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ inputs.rust-toolchain }}
        targets: ${{ inputs.target }}
    
    - name: Setup cross-compilation toolchain (non-musl)
      uses: taiki-e/setup-cross-toolchain-action@v1
      with:
        target: ${{ inputs.target }}
      if: |
        startsWith(inputs.os, 'ubuntu') && 
        !contains(inputs.target, '-musl') && 
        inputs.enable-cross == 'true'
      continue-on-error: true
    
    - name: Install cross for musl targets
      uses: taiki-e/install-action@v2
      with:
        tool: cross
      if: |
        contains(inputs.target, '-musl') && 
        inputs.enable-cross == 'true'
    
    - name: Setup cargo command
      id: setup-cargo
      shell: bash
      run: |
        if [[ "${{ inputs.target }}" == *"musl"* ]] && [[ "${{ inputs.enable-cross }}" == "true" ]]; then
          echo "command=cross" >> $GITHUB_OUTPUT
          echo "target-dir=./target/${{ inputs.target }}" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.os }}" == "ubuntu"* ]] && [[ "${{ inputs.target }}" != "x86_64-unknown-linux-gnu" ]] && [[ "${{ inputs.enable-cross }}" == "true" ]]; then
          echo "command=cross" >> $GITHUB_OUTPUT
          echo "target-dir=./target/${{ inputs.target }}" >> $GITHUB_OUTPUT
        else
          echo "command=cargo" >> $GITHUB_OUTPUT
          echo "target-dir=./target" >> $GITHUB_OUTPUT
        fi
    
    - name: Configure Cross.toml
      shell: bash
      run: |
        # Ensure Cross.toml exists and is properly configured
        if [ ! -f "Cross.toml" ]; then
          echo "Creating default Cross.toml for cross-compilation..."
          curl -sSL -o Cross.toml https://raw.githubusercontent.com/loonghao/rust-actions-toolkit/main/examples/cross-compilation/Cross-mimalloc.toml
          echo "✅ Downloaded enhanced Cross.toml with mimalloc support"
        else
          echo "Cross.toml already exists, skipping creation"
        fi
    
    - name: Configure environment variables
      shell: bash
      run: |
        # Set common environment variables
        echo "CARGO_TERM_COLOR=always" >> $GITHUB_ENV
        echo "RUST_BACKTRACE=1" >> $GITHUB_ENV
        echo "CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG=true" >> $GITHUB_ENV
        
        # OpenSSL configuration (musl targets)
        if [[ "${{ inputs.target }}" == *"musl"* ]]; then
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include/openssl" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
        fi
        
        # Windows cross-compilation configuration (fixes mimalloc issues)
        if [[ "${{ inputs.target }}" == *"windows-gnu"* ]]; then
          if [[ "${{ inputs.target }}" == "i686-pc-windows-gnu" ]]; then
            echo "CC_i686_pc_windows_gnu=i686-w64-mingw32-gcc-posix" >> $GITHUB_ENV
            echo "CXX_i686_pc_windows_gnu=i686-w64-mingw32-g++-posix" >> $GITHUB_ENV
            echo "AR_i686_pc_windows_gnu=i686-w64-mingw32-ar" >> $GITHUB_ENV
          elif [[ "${{ inputs.target }}" == "x86_64-pc-windows-gnu" ]]; then
            echo "CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc-posix" >> $GITHUB_ENV
            echo "CXX_x86_64_pc_windows_gnu=x86_64-w64-mingw32-g++-posix" >> $GITHUB_ENV
            echo "AR_x86_64_pc_windows_gnu=x86_64-w64-mingw32-ar" >> $GITHUB_ENV
          fi
        fi
        
        # Windows MSVC configuration
        if [[ "${{ inputs.target }}" == *"windows-msvc"* ]]; then
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
        fi
    
    - name: Verify setup
      shell: bash
      run: |
        echo "🔍 Verifying build environment setup..."
        echo "Target: ${{ inputs.target }}"
        echo "OS: ${{ inputs.os }}"
        echo "Rust toolchain: ${{ inputs.rust-toolchain }}"
        echo "Cargo command: ${{ steps.setup-cargo.outputs.command }}"
        echo "Target directory: ${{ steps.setup-cargo.outputs.target-dir }}"
        
        # 验证 Rust 工具链
        rustc --version
        cargo --version
        
        # 验证目标平台
        rustup target list --installed | grep "${{ inputs.target }}" || echo "⚠️ Target ${{ inputs.target }} not found"
        
        # 验证交叉编译工具 (如果需要)
        if [[ "${{ steps.setup-cargo.outputs.command }}" == "cross" ]]; then
          cross --version || echo "⚠️ Cross not available"
        fi
        
        echo "✅ Build environment setup completed"
