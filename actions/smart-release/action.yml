name: 'Smart Release'
description: '🚀 Zero-config release action with automatic project detection and optimal defaults'
author: 'loonghao'

inputs:
  # Only essential inputs - everything else is auto-detected
  github-token:
    description: 'GitHub token for release operations'
    required: true
  
  target:
    description: 'Target platform (auto-detected from matrix if not specified)'
    required: false
    default: ''
  
  # Optional overrides
  binary-name:
    description: 'Binary name (auto-detected from Cargo.toml if not specified)'
    required: false
    default: ''
  
  rust-toolchain:
    description: 'Rust toolchain version'
    required: false
    default: 'stable'
  
  # Advanced options (rarely needed)
  skip-build:
    description: 'Skip building, only upload existing artifacts'
    required: false
    default: 'false'

  draft:
    description: 'Create as draft release'
    required: false
    default: 'false'

  prerelease:
    description: 'Mark as prerelease (auto-detected from tag if not specified)'
    required: false
    default: 'auto'

  # Release notes configuration
  release-notes-template:
    description: 'Path to release notes template file (e.g., .github/release-template.md)'
    required: false
    default: ''

  generate-release-notes:
    description: 'Auto-generate release notes if no template found'
    required: false
    default: 'true'

outputs:
  release-url:
    description: 'URL of the created release'
    value: ${{ steps.upload-artifacts.outputs.release-url }}
  
  binary-path:
    description: 'Path to the built binary'
    value: ${{ steps.detect-project.outputs.binary-path }}
  
  wheel-path:
    description: 'Path to the built wheel (if applicable)'
    value: ${{ steps.detect-project.outputs.wheel-path }}
  
  project-type:
    description: 'Detected project type'
    value: ${{ steps.detect-project.outputs.project-type }}

runs:
  using: 'composite'
  steps:
    - name: Detect project configuration
      id: detect-project
      shell: bash
      run: |
        echo "🔍 Auto-detecting project configuration..."
        
        # Detect project name from Cargo.toml
        if [[ -f "Cargo.toml" ]]; then
          project_name=$(grep '^name = ' Cargo.toml | head -1 | sed 's/name = "\(.*\)"/\1/')
          echo "project-name=$project_name" >> $GITHUB_OUTPUT
          echo "✅ Project name: $project_name"
        else
          project_name=$(basename "$PWD")
          echo "project-name=$project_name" >> $GITHUB_OUTPUT
          echo "⚠️ No Cargo.toml found, using directory name: $project_name"
        fi
        
        # Detect binary name
        binary_name="${{ inputs.binary-name }}"
        if [[ -z "$binary_name" ]]; then
          binary_name="$project_name"
        fi
        echo "binary-name=$binary_name" >> $GITHUB_OUTPUT
        echo "✅ Binary name: $binary_name"
        
        # Detect target platform (aligned with Docker base image targets)
        target="${{ inputs.target }}"
        if [[ -z "$target" ]]; then
          # Auto-detect based on runner, preferring our supported targets
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            # Default to GNU for compatibility, musl available for static builds
            target="x86_64-unknown-linux-gnu"
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            # Prefer GNU for zero-dependency builds
            target="x86_64-pc-windows-gnu"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            if [[ "${{ runner.arch }}" == "ARM64" ]]; then
              target="aarch64-apple-darwin"
            else
              target="x86_64-apple-darwin"
            fi
          else
            # Fallback to most compatible target
            target="x86_64-unknown-linux-gnu"
          fi
        fi
        echo "target=$target" >> $GITHUB_OUTPUT
        echo "✅ Target: $target"
        
        # Detect project type
        has_pyproject=false
        has_binary=false
        
        if [[ -f "pyproject.toml" ]]; then
          has_pyproject=true
          echo "✅ Found pyproject.toml - Python extension project"
        fi
        
        if [[ -f "Cargo.toml" ]] && grep -q '\[\[bin\]\]' Cargo.toml; then
          has_binary=true
          echo "✅ Found binary configuration in Cargo.toml"
        elif [[ -f "src/main.rs" ]]; then
          has_binary=true
          echo "✅ Found src/main.rs - binary project"
        fi
        
        if [[ "$has_pyproject" == "true" && "$has_binary" == "true" ]]; then
          project_type="hybrid"
          echo "🎯 Project type: Hybrid (binary + Python extension)"
        elif [[ "$has_pyproject" == "true" ]]; then
          project_type="python-extension"
          echo "🎯 Project type: Python extension"
        elif [[ "$has_binary" == "true" ]]; then
          project_type="binary"
          echo "🎯 Project type: Binary"
        else
          project_type="library"
          echo "🎯 Project type: Library"
        fi
        echo "project-type=$project_type" >> $GITHUB_OUTPUT
        
        # Set paths
        binary_path="target/$target/release/$binary_name"
        if [[ "$target" == *"windows"* ]]; then
          binary_path="$binary_path.exe"
        fi
        echo "binary-path=$binary_path" >> $GITHUB_OUTPUT
        echo "wheel-path=target/wheels" >> $GITHUB_OUTPUT
        
        # Detect prerelease
        prerelease="${{ inputs.prerelease }}"
        if [[ "$prerelease" == "auto" ]]; then
          tag_name="${{ github.ref_name }}"
          if [[ "$tag_name" == *"alpha"* || "$tag_name" == *"beta"* || "$tag_name" == *"rc"* || "$tag_name" == *"pre"* ]]; then
            prerelease="true"
          else
            prerelease="false"
          fi
        fi
        echo "prerelease=$prerelease" >> $GITHUB_OUTPUT
        echo "✅ Prerelease: $prerelease"

        # Detect release notes template
        template_path="${{ inputs.release-notes-template }}"
        template_found=false

        if [[ -n "$template_path" && -f "$template_path" ]]; then
          template_found=true
          echo "✅ Using custom template: $template_path"
        else
          # Check common template locations
          for path in ".github/release-template.md" ".github/RELEASE_TEMPLATE.md" "release-template.md" "RELEASE_TEMPLATE.md"; do
            if [[ -f "$path" ]]; then
              template_path="$path"
              template_found=true
              echo "✅ Found template: $path"
              break
            fi
          done
        fi

        if [[ "$template_found" == "false" ]]; then
          echo "ℹ️ No custom template found, will use auto-generated notes"
        fi

        echo "template-path=$template_path" >> $GITHUB_OUTPUT
        echo "template-found=$template_found" >> $GITHUB_OUTPUT

    - name: Build project
      if: inputs.skip-build != 'true'
      uses: loonghao/rust-actions-toolkit@v2
      with:
        command: release
        target: ${{ steps.detect-project.outputs.target }}
        binary-name: ${{ steps.detect-project.outputs.binary-name }}
        rust-toolchain: ${{ inputs.rust-toolchain }}
        enable-python-wheels: ${{ steps.detect-project.outputs.project-type == 'python-extension' || steps.detect-project.outputs.project-type == 'hybrid' }}
        github-token: ${{ inputs.github-token }}

    - name: Process release notes template
      id: process-template
      if: steps.detect-project.outputs.template-found == 'true'
      shell: bash
      run: |
        echo "📝 Processing release notes template..."

        template_path="${{ steps.detect-project.outputs.template-path }}"
        output_path="processed-release-notes.md"

        # Read template and substitute variables
        cp "$template_path" "$output_path"

        # Common substitutions
        project_name="${{ steps.detect-project.outputs.project-name }}"
        target="${{ steps.detect-project.outputs.target }}"
        tag_name="${{ github.ref_name }}"
        version="${tag_name#v}"  # Remove 'v' prefix if present

        # Perform substitutions
        sed -i "s/{{PROJECT_NAME}}/$project_name/g" "$output_path"
        sed -i "s/{{TARGET}}/$target/g" "$output_path"
        sed -i "s/{{TAG_NAME}}/$tag_name/g" "$output_path"
        sed -i "s/{{VERSION}}/$version/g" "$output_path"
        sed -i "s/{{REPOSITORY}}/${{ github.repository }}/g" "$output_path"
        sed -i "s/{{PROJECT_TYPE}}/${{ steps.detect-project.outputs.project-type }}/g" "$output_path"

        echo "✅ Template processed: $output_path"
        echo "processed-notes=$output_path" >> $GITHUB_OUTPUT

    - name: Upload artifacts
      id: upload-artifacts
      uses: loonghao/rust-actions-toolkit/actions/upload-release-artifacts@v2
      with:
        github-token: ${{ inputs.github-token }}
        binary-name: ${{ steps.detect-project.outputs.binary-name }}
        binary-path: ${{ steps.detect-project.outputs.project-type == 'library' && 'none' || steps.detect-project.outputs.binary-path }}
        wheel-path: ${{ steps.detect-project.outputs.wheel-path }}
        upload-binaries: ${{ steps.detect-project.outputs.project-type != 'library' }}
        upload-wheels: ${{ steps.detect-project.outputs.project-type == 'python-extension' || steps.detect-project.outputs.project-type == 'hybrid' }}
        create-archives: true
        archive-name: ${{ steps.detect-project.outputs.project-name }}-${{ steps.detect-project.outputs.target }}
        draft: ${{ inputs.draft }}
        prerelease: ${{ steps.detect-project.outputs.prerelease }}
        generate-release-notes: ${{ inputs.generate-release-notes }}
        release-notes-file: ${{ steps.process-template.outputs.processed-notes }}

    - name: Summary
      shell: bash
      run: |
        echo "🎉 Smart release completed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Project Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Name**: ${{ steps.detect-project.outputs.project-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Type**: ${{ steps.detect-project.outputs.project-type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: ${{ steps.detect-project.outputs.target }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Binary**: ${{ steps.detect-project.outputs.binary-name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ -n "${{ steps.upload-artifacts.outputs.release-url }}" ]]; then
          echo "## 🔗 Release" >> $GITHUB_STEP_SUMMARY
          echo "[${{ steps.upload-artifacts.outputs.release-url }}](${{ steps.upload-artifacts.outputs.release-url }})" >> $GITHUB_STEP_SUMMARY
        fi

branding:
  icon: 'zap'
  color: 'purple'
