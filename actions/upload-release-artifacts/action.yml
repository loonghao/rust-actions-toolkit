name: 'Upload Release Artifacts'
description: '📦 Upload binaries and Python wheels to GitHub releases with smart artifact detection'
author: 'loonghao'

inputs:
  # Required inputs
  github-token:
    description: 'GitHub token for release uploads'
    required: true
  
  # Artifact configuration
  binary-name:
    description: 'Binary name to upload (auto-detected if not specified)'
    required: false
    default: ''
  
  binary-path:
    description: 'Path to binary file or directory containing binaries'
    required: false
    default: 'target/release'
  
  wheel-path:
    description: 'Path to wheel file or directory containing wheels'
    required: false
    default: 'target/wheels'
  
  # Upload options
  upload-binaries:
    description: 'Upload binary artifacts'
    required: false
    default: 'true'
  
  upload-wheels:
    description: 'Upload Python wheel artifacts'
    required: false
    default: 'true'
  
  # Archive options
  create-archives:
    description: 'Create tar.gz/zip archives for binaries'
    required: false
    default: 'true'
  
  archive-name:
    description: 'Base name for archives (defaults to binary name)'
    required: false
    default: ''
  
  # Release configuration
  tag-name:
    description: 'Release tag name (auto-detected if not specified)'
    required: false
    default: ''
  
  release-name:
    description: 'Release name (defaults to tag name)'
    required: false
    default: ''
  
  draft:
    description: 'Create as draft release'
    required: false
    default: 'false'
  
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'
  
  generate-release-notes:
    description: 'Auto-generate release notes'
    required: false
    default: 'true'

outputs:
  release-url:
    description: 'URL of the created/updated release'
    value: ${{ steps.upload-release.outputs.url }}
  
  release-id:
    description: 'ID of the created/updated release'
    value: ${{ steps.upload-release.outputs.id }}
  
  uploaded-files:
    description: 'List of uploaded files'
    value: ${{ steps.collect-artifacts.outputs.files }}
  
  binary-count:
    description: 'Number of binary files uploaded'
    value: ${{ steps.collect-artifacts.outputs.binary-count }}
  
  wheel-count:
    description: 'Number of wheel files uploaded'
    value: ${{ steps.collect-artifacts.outputs.wheel-count }}

runs:
  using: 'composite'
  steps:
    - name: Collect artifacts
      id: collect-artifacts
      shell: bash
      run: |
        echo "🔍 Collecting release artifacts..."
        
        # Initialize counters
        binary_count=0
        wheel_count=0
        files_list=""
        
        # Function to add file to list
        add_file() {
          local file="$1"
          if [[ -n "$files_list" ]]; then
            files_list="$files_list,$file"
          else
            files_list="$file"
          fi
        }
        
        # Collect binaries
        if [[ "${{ inputs.upload-binaries }}" == "true" ]]; then
          echo "📦 Looking for binaries in: ${{ inputs.binary-path }}"
          
          if [[ -f "${{ inputs.binary-path }}" ]]; then
            # Single binary file
            add_file "${{ inputs.binary-path }}"
            binary_count=1
            echo "✅ Found binary: ${{ inputs.binary-path }}"
          elif [[ -d "${{ inputs.binary-path }}" ]]; then
            # Directory containing binaries
            while IFS= read -r -d '' file; do
              if [[ -x "$file" && ! -d "$file" ]]; then
                add_file "$file"
                ((binary_count++))
                echo "✅ Found binary: $file"
              fi
            done < <(find "${{ inputs.binary-path }}" -type f -executable -print0 2>/dev/null || true)
          fi
        fi
        
        # Collect wheels
        if [[ "${{ inputs.upload-wheels }}" == "true" ]]; then
          echo "🐍 Looking for wheels in: ${{ inputs.wheel-path }}"
          
          if [[ -f "${{ inputs.wheel-path }}" && "${{ inputs.wheel-path }}" == *.whl ]]; then
            # Single wheel file
            add_file "${{ inputs.wheel-path }}"
            wheel_count=1
            echo "✅ Found wheel: ${{ inputs.wheel-path }}"
          elif [[ -d "${{ inputs.wheel-path }}" ]]; then
            # Directory containing wheels
            while IFS= read -r -d '' file; do
              add_file "$file"
              ((wheel_count++))
              echo "✅ Found wheel: $file"
            done < <(find "${{ inputs.wheel-path }}" -name "*.whl" -print0 2>/dev/null || true)
          fi
        fi
        
        echo "binary-count=$binary_count" >> $GITHUB_OUTPUT
        echo "wheel-count=$wheel_count" >> $GITHUB_OUTPUT
        echo "files=$files_list" >> $GITHUB_OUTPUT
        
        echo "📊 Summary:"
        echo "  - Binaries: $binary_count"
        echo "  - Wheels: $wheel_count"
        echo "  - Total files: $(echo "$files_list" | tr ',' '\n' | wc -l)"

    - name: Create archives
      id: create-archives
      if: inputs.create-archives == 'true' && steps.collect-artifacts.outputs.binary-count > 0
      shell: bash
      run: |
        echo "📦 Creating archives for binaries..."
        
        # Determine archive base name
        archive_name="${{ inputs.archive-name }}"
        if [[ -z "$archive_name" ]]; then
          if [[ -n "${{ inputs.binary-name }}" ]]; then
            archive_name="${{ inputs.binary-name }}"
          else
            archive_name="$(basename "$PWD")"
          fi
        fi
        
        # Get target info for archive naming
        target="${{ inputs.target || 'unknown' }}"
        
        # Create tar.gz archive
        tar_name="${archive_name}-${target}.tar.gz"
        echo "Creating $tar_name..."
        
        # TODO: Implement archive creation logic
        echo "archive-tar=$tar_name" >> $GITHUB_OUTPUT
        echo "archive-zip=${archive_name}-${target}.zip" >> $GITHUB_OUTPUT

    - name: Upload to release
      id: upload-release
      if: steps.collect-artifacts.outputs.files != ''
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.collect-artifacts.outputs.files }}
        tag_name: ${{ inputs.tag-name }}
        name: ${{ inputs.release-name }}
        draft: ${{ inputs.draft }}
        prerelease: ${{ inputs.prerelease }}
        generate_release_notes: ${{ inputs.generate-release-notes }}
        token: ${{ inputs.github-token }}

    - name: Summary
      shell: bash
      run: |
        echo "🎉 Release artifacts upload completed!"
        echo "📊 Uploaded:"
        echo "  - Binaries: ${{ steps.collect-artifacts.outputs.binary-count }}"
        echo "  - Wheels: ${{ steps.collect-artifacts.outputs.wheel-count }}"
        if [[ -n "${{ steps.upload-release.outputs.url }}" ]]; then
          echo "🔗 Release URL: ${{ steps.upload-release.outputs.url }}"
        fi

branding:
  icon: 'upload'
  color: 'blue'
